package org.apache.hadoop.examples;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

/**
 * 利用MapReduce框架将相同key聚合在一起，实现去重
 * @author hadoop
 *
 */

public class Dedup {
	
	public static class DedupMapper extends
			Mapper<LongWritable, Text, Text, Text> {
		private static Text line = new Text();
		@Override
		public void map(LongWritable key, Text value, Context context) 
				throws IOException, InterruptedException{
			line = new Text(value);
			context.write(line, new Text(""));
		}
	}
	
	public static class DedupReducer extends
			Reducer<Text, Text, Text, Text> {
		@Override
		public void reduce(Text key, Iterable<Text> values, Context context)
				throws IOException, InterruptedException{
			System.out.println("key: " + key + " values: " + values);
			context.write(key, new Text(""));
		}
	}
	
	public static void main(String[] args) throws Exception{
		if(args.length != 2) {
			System.err.println("Usage: Dedup<input path> <output path>");
			System.exit(1);
		}
		
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "dedup");
		
		job.setJarByClass(Dedup.class);
		job.setMapperClass(Dedup.DedupMapper.class);
		job.setCombinerClass(Dedup.DedupReducer.class);
		job.setReducerClass(Dedup.DedupReducer.class);
job.setNumReduceTasks(2);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		Path outputDir = new Path(args[1]);
		FileSystem fs = FileSystem.get(conf);
		if(fs.exists(outputDir)) {
			fs.delete(outputDir, true);
		}
		FileOutputFormat.setOutputPath(job, outputDir);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		
		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}

}
