package org.apache.hadoop.examples;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class MaxTemperature {
	
	public static class MaxTemperatureMapper extends 
			Mapper<LongWritable, Text, Text, IntWritable> {
		private static final int MISSING = 9999;
		
		@Override
		public void map(LongWritable key, Text value,
				Context context) throws IOException, InterruptedException {
			String line = value.toString();
			System.out.println("key : " + key);
			String year = line.substring(15, 19);
			int airTemperature = 0;
			if(line.charAt(45) == '+') {
				airTemperature = Integer.parseInt(line.substring(46, 50));
			}else {
				airTemperature = Integer.parseInt(line.substring(45, 50));
			}
			String quality = line.substring(50, 51);
			System.out.println("quality : " + quality);
			if(airTemperature != MISSING && quality.matches("[01459]")) {
				context.write(new Text(year), new IntWritable(airTemperature));
			}
		}
	}
	
	public static class MaxTemperatureReducer extends 
			Reducer<Text, IntWritable, Text, IntWritable> {

		@Override
		public void reduce(Text key, Iterable<IntWritable> values,
				Context context) throws IOException, InterruptedException {
			int maxValue = Integer.MIN_VALUE;
			for(IntWritable value : values) {
				maxValue = Math.max(maxValue, value.get());
			}
			
			context.write(key, new IntWritable(maxValue));
		}
	}
	
	public static void main(String[] args) throws Exception {
		if(args.length != 2) {
			System.err.println("Usage: MaxTemperature<input path> <output path>");
			System.exit(1);
		}
		
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "maxtemperature");
		job.setJarByClass(MaxTemperature.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		job.setMapperClass(MaxTemperature.MaxTemperatureMapper.class);
		job.setReducerClass(MaxTemperature.MaxTemperatureReducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		
		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}

}
