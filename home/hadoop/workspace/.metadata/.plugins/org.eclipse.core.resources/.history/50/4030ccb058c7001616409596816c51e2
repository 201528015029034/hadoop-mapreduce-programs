package Counter;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class CountNumUsersByState {
	
	private static class CountNumUsersByStateMapper 
		extends Mapper<LongWritable, Text, NullWritable, NullWritable>{
		public static final String STATE_COUNTER_GROUP = "State";
		public static final String UNKNOWN_COUNTER = "Unknown";
		public static final String NULL_OR_EMPTY_COUNTER = "Null or Empty";
		
		private String[] statesArray = new String[] {"AL", "AK"};
		private HashSet<String> states = new HashSet(Arrays.asList(statesArray));
		@Override
		protected void map(LongWritable key, Text value, Context context)
						throws IOException, InterruptedException {
			String line = value.toString();
			String[] tokens = line.split("\t");
			String location = tokens[1];
			if(location != null && !location.isEmpty()) {
				boolean unknown = true;
				if(states.contains(location)) {
					context.getCounter(STATE_COUNTER_GROUP, location).increment(1);
					unknown = false;
				}
				if(unknown) {
					context.getCounter(STATE_COUNTER_GROUP, UNKNOWN_COUNTER).increment(1);
				}
			}else {
				context.getCounter(STATE_COUNTER_GROUP, NULL_OR_EMPTY_COUNTER).increment(1);
			}
		}
		
	}

}
